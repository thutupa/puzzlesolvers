I forget the name of the puzzle, but basically, you have to figure out which lines are allowed in a
given grid. The box in the grid sometimes indicates the number of the allowed lines

. - .
| X |
. - .

If X = 1, only one of the four lines is allowed and so on.

In addition, the lines are continuous, so
the following are not allowed.
      
- . - 
  |   

  |
- . -
  |

Because these would be branching. Also, this implies that X != 4, because X = 4 would be a closed
line.

After struggling to figure out how to model this in code, I came up with the following. First,
represent this as a graph where the boxes are nodes and the edges are between the nodes. The
restrictions are about how many and what connections are allowed. The only interesting bit is that
we need to include nodes that are not in the original puzzle. For example, let's say the puzzle is
as follows

.   .   .   .
  3       3  
.   .   .   .
      2   1  
.   .   .   .
  3       3  
.   .   .   .

The solution is:
. - .   . - .
| 3 |   | 3 |
.   . - .   .
|     2   1 |
.   . - .   .
| 3 |   | 3 |
. - .   . - .

This solution also uses the idea that the entire puzzle solution is a single continuous line, which
is also one of the restrictions.


The graph representation is
   t1 t2 t3  
l1 A1 A2 A3 r1
l2 B1 B2 B3 r2
l3 C1 C2 C3 r3
   b1 b2 b3  

where each letter is allowed to connect only with neighbors, degree values are cell values (i.e.
deg(A1) = 3, deg(B3) = 1 and so on) and the degree of lower case cells are unknown. The goal is to
compute the entire graph.

